package dependency;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.TreeSet;

public class Courses {
	private Collection<Course> courseSet = new TreeSet<Course>();

	public double getGPA() {
		double credits = 0;
		double creditValue = 0;
//		TreeSet<Course> treeSet = (TreeSet)courses.getCourses();
		Iterator it = courseSet.iterator();
		for(int i = 0; i < courseSet.size(); i++){
			Course c = (Course) it.next();
			
			double creditsC = c.getCredits();
			switch (c.getLetterGrade()) {
			case "A":
				creditValue += 4.0 * creditsC;
				break;
			case "B+":
				creditValue += 3.5 * creditsC;
				break;
			case "B":
				creditValue += 3.0 * creditsC;
				break;
			case "C+":
				creditValue += 2.5 * creditsC;
				break;
			case "C":
				creditValue += 2.0 * creditsC;
				break;
			case "D+":
				creditValue += 1.5 * creditsC;
				break;
			case "D":
				creditValue += 1.0 * creditsC;
				break;
			case "F":
				creditValue += 0.0;
				break;
			}
			credits += creditsC;
		}
		return creditValue / credits;
	}
	public void add(Course course) {
		courseSet.add(course);
	}

	public boolean remove(String courseNum) {
		int i = 0;
		for (Course c : courseSet) {
			if (c.getCourseNum().equals(courseNum)) {
				courseSet.remove(i++);
				return true;
			}
		}
		return false;
	}
	
	public String toString() {
		return courseSet.toString();
	}
	
	public Collection<Course> getCourses() {
		return courseSet;
	}
}
